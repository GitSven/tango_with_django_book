.. _setup-label:

.. _django-basics:

Засади Django
=============
Починаємо працювати з Django! В цьому розділі ми розглянемо початок роботи з Django. Створимо новий проект та веб-додаток. Наприкінці розділу ви отримаєте вивершену веб-сторінку на Django.

Перевірка налаштувань
---------------------
Почнемо з перевірки того, що Python та Django правильно встановлені і встановлені саме ті версії, котрі використовуються у посібнику. Щоб зробити це відкрийте термінал та виконайте наступну команду:

::
	
	$ python --version
	2.7.5

Ця команда запускає інтерпретатор Python з опцією для визначення версії програмного засобу. Якщо у вас буде не 2.7.5 - зверніться до розділу :ref:`installing-software` та перевірити чи все ви виконали відповідно до вашої операційної системи.

Після перевірки Python, перевірте Django за допомогою команди:

::
	
	$ python -c "import django; print(django.get_version())"
	1.7

Ця команда виконує код, що був переданий як частина опції ``-c``. Після імпортування Django, ви повинні побачити ``1.7``. Якщо надруковано інші цифрі або ``ImportError``, поверніться до розділу :ref:`installing-software` чи подивіться `Django Documentation on Installing Django <https://docs.djangoproject.com/en/1.7/topics/install/>`_ для отримання додаткової інформації. З іншою версією Django можливі проблеми при вивченні цього посібника. Варто переконатися ще раз, що встановлено саме версію Django 1.7. 

Створення проекту Django
------------------------
Для створення нового проекту Django, перейдіть до директорії code (де ви зберігаєте свої проекти) та виконайте команду:

``$ django-admin.py startproject tango_with_django_project``

.. note:: На Windows потрібно вказувати повний шлях до django-admin.py, наприклад: ``python c:\python27\scripts\django-admin.py startproject tango_with_django_project``, так як радять на `StackOverflow <http://stackoverflow.com/questions/8112630/cant-create-django-project-using-command-prompt>`_.

Ця команда запускає скрипт ``django-admin.py``,  котрий створює новий Django-проект ``tango_with_django_project``. Зазвичай, ми додаємо ``_project`` до назви директорії з проектом щоб знати напевно, що в ній. Взагалі, назва може бути довільною.

Cтворена директорія повинна мати такий вміст:

* іншу директорію, з такоюж назвою як ім’я проекту- ``tango_with_django_project``; 
* скрипт Python ``manage.py``.

У цьому посібнику ми називаємо вкладену директорію- директорією конфігурації проекту. В ній ви знайдете скрипти Python. Ми детально розглянемо їх пізніше, але зараз ви повинні побачити:

* ``__init__.py``, пустий скрипт, наякність котрого вказує інтерпритатору Python, що директорія є Python-пакунком;
* ``settings.py``, місце зберігання налаштувань проекту;
* ``urls.py``,скрипт для збереження URL-патернів проекту;
* ``wsgi.py``, допоміжний скрипт для запуску сервера розробки або доставки проекту на робочий сервер.

.. note:: Каталог конфігурації проекту створюється з новими проектами Django, починаючи з версії 1.4. Наявність двох каталогів з одним ім'ям може здатися трохи дивною, але це зроблено, щоб відокремити пов'язаниі з проектом компоненти та його окремі додатки.

В директорії проекту розташований файл ``manage.py``. Ми будемо запускати цей скрипт раз за разом під час виконання проекту, так як цей скрипт надає команди для супроводу і розробки. Наприклад,  ``manage.py`` дає змогу запустити вбудований в Django веб-сервер для виконання тестів або запуску команд бази даних. Ви будете часто використовувати цей скрипт на протязі всього циклу розробки.

.. note:: Для отримання більш докладної інформації дивітся `Admin and Manage scripts <https://docs.djangoproject.com/en/1.7/ref/django-admin/#django-admin-py-and-manage-py>`_.

Ви можете негайно спробувати скрипт- запустіть таку команду:

``$ python manage.py runserver``

Виконання цієї команди запускає полегшений веб-сервер Django для розробки. У вікні вашого терміналу відтвориться щось на зразок:

::
	
	$ python manage.py runserver

	System check identified no issues (0 silenced).

	You have unapplied migrations; your app may not work properly until they are applied.
	Run 'python manage.py migrate' to apply them.

	October 01, 2014 - 19:49:05
	Django version 1.7c2, using settings 'tango_with_django_project.settings'
	Starting development server at http://127.0.0.1:8000/
	Quit the server with CONTROL-C.
	
	
	
::

	$ python manage.py migrate
	
	Operations to perform:
	  Apply all migrations: admin, contenttypes, auth, sessions
	Running migrations:
	  Applying contenttypes.0001_initial... OK
	  Applying auth.0001_initial... OK
	  Applying admin.0001_initial... OK
	  Applying sessions.0001_initial... OK
	
	
#TODO(leifos): add description of migrate command: from django tutorial: Команда міграції шукає параметр INSTALLED_APPS (встановлені додатки) в файлі проекту settings.py і створює необхідні таблиці бази даних згідно налаштувань кожного додатку (детальніше буде розглянуто пізніше). Ви побачите повідомлення для кожної міграції що застосовується. Якщо вам цікаво- запустіть клієнт командного рядку для вашої бази даних та введіть dt (для PostgreSQL), SHOW TABLES; (MySQL), або .schema (SQLite) для перегляду створених таблиць.	
	

Тепер відкрийте ваш улюблений веб-переглядач та перейдіть за адресою http://127.0.0.1:8000/ [#f1]_. Ви повинні побачити сторінку як на малюнку :num:`fig-django-dev-server-firstrun`: 

.. _fig-django-dev-server-firstrun:

.. figure:: ../images/django-dev-server-firstrun.png
	:figclass: align-center
	
	Початкова сторінка Django, що виводиться коли сервер розробки запускається вперше.

Ви можете зупинити сервер розробки в будь-який час, натиснувши ``CTRL + C`` у вікні терміналу. Якщо ви хочете запустити сервер розробки на іншому порту, або надати доступ користувачам з інших машин, ви можете зробити це шляхом подачі додаткових аргументів. Розглянемо наступну команду:

``$ python manage.py runserver <your_machines_ip_address>:5555``

Виконання цієї команди змусить сервер розробки реагувати на вхідні запити на TCP порту 5555. Вам потрібно буде замінити ``<your_machines_ip_address>`` на IP-адресу вашого комп'ютера. 

При установці портів, малоймовірно, що ви зможете використовувати TCP-порт 80, який традиційно зарезервований для HTTP-трафіку. Крім того, будь-який порт нижче 1024 вважається привілейованим і не повинен використовуватися звичайним користувачем (`privileged <http://www.w3.org/Daemon/User/Installation/PrivilegedPorts.html>`_).

Хоча ви не будете використовувати легкий сервер розробки для розгортання програми, іноді це корисно, щоб бути в змозі показати демо додатки на комп'ютері свого колеги. Запуск сервера з IP-адресою машини дозволить іншим увійти на ``http://<your_machines_ip_address>:<port>/`` і переглядати веб-додатки. Звичайно, це буде залежати від того, як ваша мережа налаштована. Там може бути проксі-сервери або брандмауери в дорозі, який мали б бути налаштовані перед цим працюватиме. Зверніться до адміністратора мережі, яку ви використовуєте, якщо ви не можете переглядати сервер розробки дистанційно.

.. note:: Скрипти ``django-admin.py`` і ``manage.py`` багатофункціональні та заощаджують ваш час. ``django-admin.py`` допомагає починати нові проекти та додатки, виконувати інші корисні команди. В межах каталогу вашого проекту ``manage.py`` дозволяє виконувати різноманітні адміністративні задачі в границях тільки вашого проекту. Просто запустіть бажаний скрипт без аргументів щоб побачити можливості його використання. На `офіційній сторінці документації Django <https://docs.djangoproject.com/en/1.7/ref/django-admin/>`_ є більш докладний опис обох скриптів.

Якщо ви користуєтесь системою контроля версій, зараз добра нагода зафіксувати зміни. Переглянте  :ref:`прискорений курс з GIT <git-crash-course>` якщо ви не пам’ятаєте як це зробити.

Створення додатку Django
------------------------
Проект Django це збірка *конфігурацій* та *додатків*, що разом утворюють веб-додаток або сайт. Одним з передбачуваних результатів цього підходу є заохочення використання кращих методів розробки програмного забезпечення. Розвиваючи невелику серію додатків, ідея полягає в тому, що теоретично можна видалити існуючий додаток в інший проект Django і це працює з мінімальними зусиллями. Навіщо винаходити велосипед, якщо він вже є?[#f2]_

Кожен Django додаток існує для виконання окремої задачі. Потрібно створювати специфічні додатки, котрі додають вашому сайту певної функціональності. Наприклад, ми можемо уявити проект, що складається з декількох додатків, включаючи додатки для голосування, реєстрації, та зміст до відповідних додатків. В іншому проекті, нам потрібно ще раз використати додатки для голосування та реєстрації, і використати їх з іншим змістом. Є багато Django додатків для `завантаження <https://code.djangoproject.com/wiki/DjangoResources#Djangoapplicationcomponents>`_ і використання в ваших проектах. Оскільки ми початківці, почнемо зі створення свого власного додатку.

Для початку, створіть новий додаток на ім'я *Rango*. З каталогу проекту Django (наприклад ``<workspace>/tango_with_django_project``), виконайте таку команду:

::
	
	$ python manage.py startapp rango

Команда ``startapp`` створює новий каталог у корені каталогу проекту. Як не дивно, цей каталог називається ``rango`` - і містить п'ять скриптів Python:

- ще один ``__init__.py``, з тим же призначенням, що ми розглянули раніше;
- models.py, місце для зберігання моделей даних додатку - де ви визначите сутності та зв'язки;
- tests.py, для зберігання функцій тестування коду вашого додатку; 
- views.py, для зберігання функцій відповідальних за обробку клієнтських запитів(request) та повернення відгуків (response).
- admin.py, де треба зареєструвати потрібну модель даних, щоб Django автоматично створив адміністративний інтерфейс до неї (see #TODO(leifos):add link to admin chapter)


``views.py`` і ``models.py`` - обидва файли використовуються у будь-якому додатку і є частиною головного архітектурного задуму Django, тобто патерну *Модель-Вид-Шаблон*. Переглянте `офіційну документацію <https://docs.djangoproject.com/en/1.7/intro/overview/>`_ щоб побачити більш детально як моделі, види і шаблони співвідносяться один з одним.

Перед тим як створювати власні моделі і види необхідно вказати проекту Django про ваш новий додаток. Для цього потрібно зиінити файл ``settings.py``, що в міститься в каталозі конфігурації проекту. Відкрийте файл і знайдіть кортеж(tuple) ``INSTALLED_APPS``. Додайте ``rango`` в кінці кортежа, так щоб було як в наступному прикладі:

.. code-block:: python

	INSTALLED_APPS = (
	    'django.contrib.admin',
	    'django.contrib.auth',
	    'django.contrib.contenttypes',
	    'django.contrib.sessions',
	    'django.contrib.messages',
	    'django.contrib.staticfiles',
	    'rango',
	)

Перевірте, що Django підхопив новий додаток запустивши знову сервер розробки. Якщо не виникне помилок - ваш додаток підххоплено і ви готові до наступного кроку.

Створення виду
--------------
Давайте створимо для нашого додатку Rango простий вид. Для першого разу - лише повернемо простий текст клієнту - ми, поки що, не хочемо турбуватися про те як використовувати моделі і шаблони.

У вашому улюбленому IDE(інтегроване середовище розробки), відкрийте файл ``views.py``, що міститься у новоствореному каталозі додатку ``rango``. Видаліть коментарій ``# Create your views here.``, так щоб отримати пустий файл.

Тепер додайте такий код:

.. code-block:: python

	from django.http import HttpResponse
	
	def index(request):
	    return HttpResponse("Rango says hey there world!")

Розбираючи ці три рядки коду, ми з'ясуємо як створено цей простий вид.

* Спочатку ми імпортуємо `HttpResponse <https://docs.djangoproject.com/en/1.7/ref/request-response/#django.http.HttpResponse>`_ об'єкт з модулю ``django.http``.
* Кожен вид міститься у файлі ``views.py`` як серія окремих функцій. У нашому випадку ми створили лише один вид на ім'я ``index``.
* Кожному виду передається, щонайменше, один аргумент - об'єкт `HttpRequest <https://docs.djangoproject.com/en/1.7/ref/request-response/#django.http.HttpRequest>`_ , котрий також знаходиться у модулі ``django.http``. За угодою його називають ``request``, але, якщо бажаєте, можете назвати його як завгодно.
* Кожен вид має повернути об'єкт HttpResponse. Простий об'єкт HttpResponse приймає рядковий параметр, що уособлює зміст сторінки, котру ми хочемо відправити клієнту.

Створення виду- лише частина роботи. Щоб користувач був здатен побачити вид- потрібно створити  `Уніфікований покажчик інформаційного ресурсу (URL) <http://en.wikipedia.org/wiki/Uniform_resource_locator>`_.

Відображення URL-ів
-------------------
В директорії додатку ``rango`` треба створити новий файл ``urls.py``. Вміст файлу дасть змогу відображати URL-и вашого додатку (наприклад ``http://www.tangowithdjango.com/rango/``) на окремі види. Переглянте наведений нижче файл ``urls.py``.

.. code-block:: python

	from django.conf.urls import patterns, url
	from rango import views

	urlpatterns = patterns('',
		url(r'^$', views.index, name='index'))

Цей код імпортує необхідні механізми Django для створення URL відображень. Імпорт модуля ``views`` з додатку ``rango`` дає нам доступ до виду, що ми створили раніше.

Для створення відображень використовується `кортеж(tuple) <http://en.wikipedia.org/wiki/Tuple>`_. Щоб Django побачив відображення цей кортеж *повинен* мати ім'я ``urlpatterns``. Кортеж ``urlpatterns`` містить серію викликів функції ``django.conf.urls.url()`` , кожен з яких підтримує унікальне відображення. В наведеному прикладі ми викликаємо ``url()`` лише один раз, таким чином, ми створили одне URL відображення. Перший параметр, що ми передали функції ``django.conf.urls.url()`` - це регулярний вираз ``^$``, що співпадає з пустим рядком. Будь-який URL ,переданий користувачем, що відповідає цьому паттерну призводить до виклику функції ``views.index()``. Вид повинен отримати об'єкт ``HttpRequest`` як параметр з інформацією про запит користувача до сервера. Також ми використали додатковий параметр функції ``url()`` - ``name`` зі значенням ``'index'``.

.. note:: Можливо, ви подумаєте, що безглуздо відображати пустий URL - як його можна використати? Коли перевіряються співпадання URL тільки частина рядку URL розглядається. Це тому що спочатку рядок URL обробляє проект Django (наприклад ``http://www.tangowithdjango.com/rango/``). Після чого оброблена частина видаляється, а залишок передається далі. У нашому випадку нічого не залишиться, таким чином пустий рядок повинен співпасти!

.. note:: Параметр ``name`` функції ``django.conf.urls.url()`` - необов'язковий. Він використовується Django  щоб розрізняти відображення одне від одного. Цілком імовірно що два різних URL відображень викликають один вид. ``name`` дозволяє їх розрізнити - що іноді  корисно для  *зворотнього URL співставлення.* Подивіться `офіційну документацію Django <https://docs.djangoproject.com/en/1.7/topics/http/urls/#naming-url-patterns>`_ для докладного ознайомлення.

Можливо ви помітили, що в каталозі конфігурації проекту вже є файл ``urls.py``. Навіщо ще один? Формально, ви можете розмістити *всі* URL-и у цьому файлі. Однак, це погана звичка, що призводить до залежності ваших додатків один від одного. Відокремлений файл ``urls.py`` дозволяє налаштувати URL-и для кожного додатку окремо. З мінімальною залежністью, ви можете потім об'єднати їх через головний файл ``urls.py`` проекту.

Це означає, що нам потрібно сконфігурувати ``urls.py`` нашого проекту ``tango_with_django_project`` та з'єднати головний проект та додаток Rango.

Як це зробити? Зовсім просто. Відкрийте файл ``urls.py`` з теки конфігурації проекту. Шлях о цього файлу, відносно каталогу робочого простору, повинен бути таким: ``<workspace>/tango_with_django_project/tango_with_django_project/urls.py``. Змініть кортеж ``urlpatterns`` як наведено нижче:

.. code-block:: python
	

	urlpatterns = patterns('',
	    # Examples:
	    # url(r'^$', 'tango_with_django_project_17.views.home', name='home'),
	    # url(r'^blog/', include('blog.urls')),

	    url(r'^admin/', include(admin.site.urls)),
	    url(r'^rango/', include('rango.urls')), # ДОДАЙТЕ ЦЕЙ НОВИЙ КОРТЕЖ!
	)

Додане відображення співпадає з рядками url що відповідають патерну ``^rango/``. Коли співпадання зроблено залишок рядку url передається на обробку до ``rango.urls`` (котрий ми вже налаштували). Це зроблено за допомогою функції ``include()`` з модулю ``django.conf.urls``. Розглядайте це як ланцюжок, що обробляє рядок URL - так як показано на малюнку :num:`fig-url-chain`. В цьому ланцюжку домен вилучається і залишок рядка url (``rango/``) передається до проекту tango_with_django де знаходиться і видаляється ``rango/`` , а залишок, пустий рядок, передається до додатку rango. Rango шукає співпадіння з пустим рядком, знаходить, і викликає вид ``index()``, що ми створили.

Перезапустіть сервер розробки Django і відвідайте ``http://127.0.0.1:8000/rango``. Якщо все нормально, ви повинні побачити текст ``Rango says hello world!``. Він повинен бути як на копії екрану, що показана на малюнку :num:`fig-rango-hello-world`.

.. _fig-url-chain:

.. figure:: ../images/url-chain.svg
	:figclass: align-center
	
	Ілюстрація URL, що показує як за різні частини URL відповідають різні файли ``url.py``.

.. _fig-rango-hello-world:

.. figure:: ../images/rango-hello-world.png
	:figclass: align-center

	Скрін Google Chrome показує нашу першу сторінку на Django. Привіт, Rango!

Для кожного додатку ви будете створювати певну кількість відображень URL-вид. Наше перше відображення зовсім просте. У міру просування, ми будемо створювати більш складні відображення URL-ів з параметрами.

Важливо мати розуміння як URL-и підтримуються Django. Якщо ви трохи заплуталися або хочете дізнатися більше переглянте `офіційну документацію Django з URL-ів <https://docs.djangoproject.com/en/1.7/topics/http/urls/>`_.

.. note:: Патерни URL використовують `регулярні вирази <http://en.wikipedia.org/wiki/Regular_expression>`_ щоб перевіряти співпадіння. Варто вивчити як користуватися регулярними виразами в Python. В офіційній документації з Python є `корисний посібник з регулярних виразів <http://docs.python.org/2/howto/regex.html>`_ , а regexcheatsheet.com надає  `короткий виклад з регулярних виразів <http://regexcheatsheet.com/>`_.

Підсумок
--------
Те, що ви тільки що дізналися в цій главі, можна коротко резюмувати в список дій. Тут ми надаємо ці списки для двох різних завдань, які ви щойно виконали. Ви можете використовувати цей розділ для швидкого ознайомлення, якщо вам потрібно, щоб нагадати собі про конкретні дії.

Створення нового проекту Django
...............................
#. Щоб створити новий проект запустіть, ``python django-admin.py startproject <name>``, де ``<name>`` це назва проекту що потрібно створити.

Створення нового додатку Django
...............................
#. Щоб створити новий додаток виконайте, ``$ python manage.py startapp <appname>``, де ``<appname>`` назва додатку що потрібно створити.
#. Повідомте проект Django про новий додаток додавши до кортежу ``INSTALLED_APPS`` в файлі пректу ``settings.py``.
#. В файлі проекту ``urls.py`` додайте відображення на додаток.
#. У теці вашого додатку створіть файл ``urls.py`` для передачі рядків URL strings до видів.
#. У файлі ``view.py`` вашого додатку створіть потрібні види, маючи на увазі? що вини повинні повернути об'єкт ``HttpResponse``.

Вправи
------
Поздоровляю! Ви створили і запустили Rango. Це важлива віха в роботі з Django. Створення видів і відображення URL-ів на них - це перший крок у розробці більш складних і корисних веб-додатків. Тепер спробуйте виконати вправи щоб закріпити вивчене.

* Переглянте методику і впевніться, що ви розумієте як відображаються URL-и на види.
* Тепер створіть новий вид на ім'я ``about`` котрий повертає такий рядок: ``Rango says here is the about page.``
* Відобразте цей вид на ``/rango/about/``. Для цього треба виправити ``urls.py`` додатку rango.
* Змініть ``HttpResponse`` в виді ``index`` щоб додати посилання на сторінку "about".
* В ``HttpResponse`` виду ``about`` додайте посилання назад, на головну сторінку.
* Якщо ви досі цього не зробили, зараз саме час опрацювати першу частину офіційного `Посібника з Django <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_. 

Натяки
......
Якщо вам важко зробити вправи ми сподіваємося, що ці підказки допоможуть:

* До виду ``index`` потрібно додати посилання на вид ``about``. Поки, просто зробіть щось на зразок: ``Rango says: Hello world! <br/> <a href='/rango/about'>About</a>``. Цього досить. Згодом ми повернемося і покращимо цю сторінку.
* Регулярний вираз, що співпадає з ``about/``  - це   ``r'^about/'``.
* Зворотнє HTML посилання на сторінку ``index`` це ``<a href="/rango/">Index</a>``. Схоже посилання на сторінку  ``about`` вже показано вище.

.. rubric:: Примітки
.. [#f1]  Мається на увазі, що ви використовуєте IP-адресу 127.0.0.0 та порт 8000 коли запускаєте cервер Django. Саме цей порт використовує Django, якщо при старті не вказано інше.

.. [#f2] Є багато додатків котрі ви можете використовувати у своїх проектах. Поглянте на `PyPI <https://pypi.python.org/pypi?%3Aaction=search&term=django&submit=search>`_ та `Django Packages <https://www.djangopackages.com/>`_ щоб знайти потрібний і додати в проект.
