.. _overview-label:

Огляд
========
Мета цієї книги полягає в наданні практичного керівництва по веб-розробці з використанням *Django 1.7.* Книга призначена в першу чергу для студентів і забезпечує проходження всіх етапів в створенні перших веб-додатків, а також розгортанні їх на веб-сервері.

Ця книга намагається доповнити `офіційний посібник Django <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_ і багато інших чудових підручників котрі доступні онлайн. Зібравши все разом, ця книга заповнює багато прогалини в офіційній документації Django та організовує вивчення фреймворку Django на прикладах. Крім того, ця книга являє собою введення в багатьох інших аспектах, необхідних для освоєння розробки веб-додатків.

Чому саме ця книжка?
--------------------
**Ця книга допоможе вам заощадити час.** Ми часто бачили як розумні студенти спотикаються, проводячи години, намагаючись боротися з Django та іншими аспектами веб-розробки. Найчастіше, проблема, як правило, у тому, що не було надано ключової частини інформації, або щось було не роз’яснено. Деякі такі вади потребують 10-15 хвилин щоб надолужити, а іноді вони можуть зайняти кілька годин. Ми постаралися вилучити так багато перепон, як це можливо. Це означає, що ви можете зосередитися на розробці програми, а не сидіти чухати потилицю.

**Ця книга дозволить знизити криву навчання.** Фреймворки веб додатків можуть врятувати вас від зайвого клопоту та заощадити купу часу. Але, спочатку, потрібно навчитися їх використовувати! Часто крива навчання буде стрімкою. Ця книга намагається примусити вас просуватися швидше і швидше. Демонструючи як з самого початку зібрати до купи веб додаток, з усіма дзвониками і рюшечками, книга значно скорочує криву навчання. 

**Ця книжка покращить перебіг роботи.** Використання фреймворків веб додатків вимагає від вас обрати та використовувати певний патерн проектування - так, що вам потрібно лише доповнити певні частини у визначених місцях. Після роботи з багатьма студентами, ми отримали велику кількість скарг про використання фреймворків веб-додатків - зокрема про те, як вони позбавляють їх управління (тобто інверсія управління). Щоб допомогти вам, ми створили ряд робочих процесів, щоб організувати вашу роботу без втрати відчуття контролю і ви дисципліновано будували свої веб додатки.

**Ця книга не призначена для читання.** Що б ви не робили, не читайте цю книгу! Це практичний путівник зі створення веб-додатків в Django. Читати не значить робити. Щоб отримати більше досвіду йдіть до кінця і створюйте програму. При написанні коду додатку, *не просто вирізайте і вставляйте код.* Введіть його,подумайте про те, що цей код робить, потім прочитайте наші пояснення. Якщо ви все ще не розумію, перечитайте документацію Django, перейдіть до `Stack Overflow <http://stackoverflow.com/questions/tagged/django>`_ або інші корисні веб-сайти і заповніть прогалину у своїх знаннях. Якщо ви вважаєте, що щось варто додати, будь ласка, зв'яжіться з нами, щоб ми могли покращити книгу - у нас вже є ряд учасників, і ми з радістю визнаємо Ваш внесок!

Про що ви дізнаєтесь
--------------------
Ця книга побудована на принципах навчання на прикладах. В книзі показано як створити веб додаток  *Rango* (див. опис проекту далі, в розділі :ref:`overview-design-brief-label`). Принагідно, ми покажемо як вирішувати такі задачі:

* Налаштувати середовище розробки - використання терміналу, встановлювач Pip, як користуватися Git, таке інше.
* Налаштувати проект Django та створити базовий додаток Django.
* Сконфігурувати проект Django для використовування статичних медіа, або інших медіа файлів.
* Працювати з Джангівським шаблоном проектування *Model-View-Template*.
* Створювати моделі бази даних та використовувати функціонал об’єктно-реляційного відображення котрий надає Django.
* Проектувати форми з використанням моделей бази даних для створення динамічно генерованих веб сторінок.
* Використовувати служби Django для автентифікації користувачів.
* Впроваджувати зовнішні служби до додатку.
* Використовувати *Каскадні таблиці стилів (CSS)* та *JavaScript* з веб додатками.
* Проектувати та застосовувати CSS для покращення зовнішнього вигляду веб додатку.
* Працювати з кукі та сесіями в Django.
* Використовувати більш складний функціонал, на зразок *AJAX*, в вашому додатку.
* Розгортати додаток на веб сервері з використанням *PythonAnywhere.*

Наприкінці кожного розділу ми додали кілька вправ, які розроблено для кращого засвоєння матеріалу, та перевірки, чи зможете ви застосовувати отримані навички.  Увесь код доступний на *GitHub* за адресою https://github.com/leifos/tango_with_django.

Щоб побачити повнофункціональну версію додатку відвідайте сайт `How to Tango with Django <http://www.tangowithdjango.com/>`_ за посиланням http://www.tangowithdjango.com/rango/.

Технології і служби
-------------------
В книзі використано різноманітні технології та зовнішні служби:

* Python, http://www.python.org
* Pip, http://www.pip-installer.org
* Django, https://www.djangoproject.com
* Git, http://git-scm.com 
* GitHub, https://github.com
* HTML, http://www.w3.org/html/
* CSS, http://www.w3.org/Style/CSS/
* Javascript
* JQuery, http://jquery.com
* Twitter Bootstrap, http://getbootstrap.com/
* Bing пошуковий API через Azure Datamarket, http://datamarket.azure.com
* PythonAnywhere, https://www.pythonanywhere.com

Ми обрали їх через те що вони є фундаментальними для веб розробки та/або у змозі надати приклади як інтегрувати до вашого додатку CSS інструментарій (на зразок *Twitter Bootstrap*), зовнішні служби як *Microsoft Azure* та розгорнути ваш додаток швидко й легко за допомогою PythonAnywhere.

Rango: Початковий проект та характеристики
------------------------------------------
Як вже згадувалося, осередком цієї книги буде розробка додатку на ім’я *Rango*. У процесі розробки ми опишемо основні компоненти, котрі потрібні при розробці будь-якого іншого веб додатку.

.. _overview-design-brief-label:

Задум стисло
............
Ваш клієнт хоче щоб ви створили веб-сайт названий *Rango*, котрий дає можливість відвідувачу переглядати визначені користувачами категорії для доступу до веб-сторінок. З іспанської "rango" перекладається як "ранг".

* Клієнт хотів би, щоб на *головній сторінці* сайту відвідувачі могли побачити:
	* 5 найчастіше відвідуваних сторінок;
	* п’ять сторінок з найвищим рангом; та
	* якимось чином надати можливість відвідувачам переглядати або шукати в категоріях.
* Під час перегляду користувачем *сторінки категорії*, він хотів би відображати:
	* ім’я категорії, кількість відвідувань, кількість лайків (уподобань);
	* перелік асоційованих сторінок цієї категорії (виводяться заголовки сторінок та посилання на них); 
	* можливість пошуку (через пошукове API Bing) для пошуку інших сторінок, що можуть бути зв’язані з цією категорією.
* Для кожної категорії клієнт хотів би зберігати ім’я категорії, кількість відвідувань, та кількість користувачів що натиснули кнопку лайк (згідно з цим показником категорія отримує ранг та просувається вгору по соціальній ієрархії).
* Кожна категорія повинна мати читабельний URL, наприклад- ``/rango/books-about-django/``.
* Тільки зареєстровані користувачі повинні мати можливість шукати та додавати сторінки до категорій. Виходячи з цього, відвідувачі повинні мати змогу зареєструватись і створити собі обліковий запис.

На перший погляд, розробка цього додатку буде досить простою. По суті, це лише перелік категорій пов’язаних зі сторінками, правильно? Проте, є певна кількість складнощів і викликів, які необхідно вирішити. По-перше, давайте спробуємо створити більш повну картину того, що повинно бути розроблене, для чого створимо деякі ескізні проекти.

Вправи
------
Перед тим як просуватися далі обміркуйте ці специфікації та намалюйте такі ескізи:

* Схему багатошарової архітектури.
* Ескізи головної сторінки та сторінки категорій.
* URL відображення.
* Схему сутність-зв'язок, для опису моделі даних що ми будемо впроваджувати.

Багатошарова архітектура
------------------------
На верхньому рівні більшість веб-додатків використовують *три-шарову архітектуру.* Rango буде варіантом цієї архітектури з використанням зовнішніх служб.

.. _fig-ntier:

.. figure:: ../images/rango-ntier-architecture.svg
	:scale: 100%
	:figclass: align-center
	
	Огляд системної архітектури Rango. Зверніть увагу на включення зовнішнього пошуку *Application Programming Interface (API).*

Так як ми будуємо Django веб-додаток, для кожного шару будуть використовуватися такі технології:

* *Клієнт* це веб-браузер (наприклад Chrome, Firefox, Safari, і таке інше) котрий буде виводити сторінки HTML/CSS.
* *Проміжне ПЗ*- додаток Django. На протязі розробки він буде працювати через вбудований в Django веб-сервер.
* *БД*- в якості Бази Даних буде використовуватися *SQLite3*.
* *Пошуковий API* - скористаємось *Bing пошуковий API.*

Здебільшого книга зосереджена на розробці проміжного ПЗ, хоча, з малюнка :num:`fig-ntier` зрозуміла необхідність взаємодії з усіма іншими компонентами.

Ескізи
------
Ескізи є відмінним способм, щоб надати клієнтам уяву про те, як буде виглядати завершений додаток. Вони заощаджують купу часу і можуть бути як намальованим від руки ескізом, так і точним макетом- в залежності від доступних для розробника інструментів. Для Rango, ми б хотіли, щоб індексна сторінка сайту виглядала як на малюнку :num:`fig-index-page`. Наша сторінка категорій зображена на малюнку :num:`fig-cat-page`.

.. _fig-index-page:

.. figure:: ../images/ch1-rango-index.png
	:scale: 60%
	:figclass: align-center

	Індексна сторінка зі смужкою категорій ліворуч, також показана перша п’ятірка сторінок та перша п’ятірка категорій.

.. _fig-cat-page:

.. figure:: ../images/ch1-rango-cat-page.png
	:scale: 60%
	:figclass: align-center
	
	На сторінці категорії показані включені до цієї категорії сторінки (разом з кількістью переглядів). Також показано пошук за словом *Python* , та нижче наведені результати пошуку.

Сторінки та URL-відображення
----------------------------
У спеціфікації ми вже визначилися з двома сторінками нашого додатку. Щоб отримати доступ до кожної з цих сторінок потрібно описати, якимось чином, URL-відображення. Уявляйте собі URL-відображення як текст, що користувач повинен ввести в адресному рядку браузера для перегляду даної сторінки. Основні URL-відображення для Rango наведені нижче.

* ``/rango/`` буде вказувати на головну (інакше- індексну) сторінку.
* ``/rango/about/`` -посилання на сторінку "Про цей додаток".
* ``/rango/category/<category_name>/`` -посилання на сторінку категорії для ``<category_name>``, де категорія може бути:
	* ігри;
	* поради з python; або
	* код та компілятори.
* ``/rango/etc/``, де ``etc`` може бути замінено будь-якою функцією котру ми створимо згодом.

Під час подальшої розробки нашого додатку, можливо, нам знадобляться інші URL-відображення. Однак, для початку, досить наведених вище. Згодом, нам треба буде перетворити імена категорій на чинні рядки URL, а також врахувати випадок, коли надане ім’я категорії не існує. 

Далі ми з’ясуємо, як створити ці сторінки за допомогою Django і як використовувати патерн (від перекладача: а мені подобається слово взірець) Модель-Вигляд-Шаблон. Однак тепер, коли ми маємо уявлення про URL-відображення та визначилися як повинні виглядати сторінки, нам треба визначити модель даних, де буде зберігатися інформація для нашого веб-додатку.

Схема сутність-зв’язок.
-----------------------
Згідно специфікації повинно бути зрозуміло, що ми маємо принаймні дві сутності: категорія і сторінка. Також, повинно бути зрозуміло, що категорія може уміщувати деяку кількість сторінок. Для опису цієї простої моделі даних можна використати таку схему:

.. _fig-rango-erd:

.. figure:: ../images/rango-erd.svg
	:scale: 100%
	:figclass: align-center

	Схема зв'язків двох сутністей Rango.

Зверніть увагу, що ця специфікація не досконала. Одна сторінка може знаходитися в одній або декількох категоріях.Таким чином, ми могли б змоделювати відносини як багато-до-багатьох. Однак цей підхід додає складнощів, тому ми зробимо спрощення, що *одна категорія містить багато сторінок, але одна сторінка призначена для однієї категорії*. Це не виключає, що та ж сторінка може бути віднесена до різних категорій - але сторінки повинні бути введені два рази, що не зручно.

Такі речі необхідно занотовувати. Невідомо коли вони поверуться, щоб переслідувати вас! Занотувавши їх, ви будете впевнені, що в подальшому, при спілкуванні з командою розробників, не винекне непорузумінь.

Остаточний варіант таблиць наведено нижче, де Str позначено поле типу string або char, Int означає integer, URL - поле URL, FK- зовнішній ключ (FOREIGN KEY).

.. raw:: html
	
	<style type="text/css">
		
		#ch1-tables table {
			width: 80%;
			margin: auto;
			margin: 
		}
		
		#ch1-tables table tr th {
			border-bottom: 2px solid black;
			text-align: center;
		}
		
		#ch1-tables table tr.table-header th {
			border-bottom: none;
			margin: 10px 0 10px;
			font-size: 12pt;
			font-style: italic;
		}
		
		#ch1-tables table tr td {
			text-align: center;
			border-bottom: 1px solid lightgray;
		}
		
		#ch1-tables table th.none, #ch1-tables table td.none {
			border: none;
		}
	
	</style>
	
	<div id="ch1-tables">
		<table>
			
			<tr class="table-header">
				<th colspan="2">Category Table</th>
				<th class="none">&nbsp;</th>
				<th colspan="2">Page Table</th>
			</tr>
			
			<tr>
				<th style="width: 20%;">Field</th>
				<th style="width: 20%;">Type</th>
			
				<th class="none"></th>
			
				<th style="width: 20%;">Field</th>
				<th style="width: 20%;">Type</th>
			</tr>
		
			<tr>
				<td>name</td>
				<td>Str</td>
			
				<td class="none">&nbsp;</td>
			
				<td>category</td>
				<td>FK</td>
			</tr>
			
			<tr>
				<td>views</td>
				<td>Int</td>
			
				<td class="none">&nbsp;</td>
			
				<td>title</td>
				<td>Str</td>
			</tr>
			
			<tr>
				<td>likes</td>
				<td>Int</td>
			
				<td class="none">&nbsp;</td>
			
				<td>url</td>
				<td>URL</td>
			</tr>
			
			<tr>
				<td class="none">&nbsp;</td>
				<td class="none">&nbsp;</td>
		
				<td class="none">&nbsp;</td>
		
				<td>views</td>
				<td>Int</td>
			</tr>
	
		</table>
	</div>

У нас ще буде таблиця User, яка буде показана далі в книзі. Потім ми ще побачимо як використовувати ці моделі в Django та як користуватися об'єктно-реляційним відображенням Django для з'єднання з базою даних.

Підсумок
--------
Ми будемо посилатися на цей початковий проект та специфікації при подальшій розробці нашого веб-додатку. Вищенаведені кроки є загальновживаними при розробці веб-сайтів керованих базами даних. Буде корисно мати навички з розробки подібних специфікацій та проектів.

Якщо ви вже маєте налаштовані Python 2.7 і Django 1.7, впевнено працюєте з командним рядком, маєте сконфігуровані шляхи- тоді можете одразу перейти до розділу :ref:`Django Basics <django-basics>`. Якщо ні - продовжуйте з :ref:`requirements-label`.

Вивчення офіційних посібників Django.
.....................................
Ми радимо вивчати `Official Django Tutorials <https://docs.djangoproject.com/en/1.7/intro/tutorial01/>`_ як частину вправ, що пов’язані з кожним розділом цьго посібника. Нижче наведено пов’язані розділи обох посібників. Виконання вправ поглибить розуміння Django та покращить ваші навички.

.. raw:: html
	
	<style type="text/css">
		
		#ch1-tables table {
			width: 80%;
			margin: auto;
			margin: 
		}
		
		#ch1-tables table tr th {
			border-bottom: 2px solid black;
			text-align: center;
		}
		
		#ch1-tables table tr.table-header th {
			border-bottom: none;
			margin: 10px 0 10px;
			font-size: 12pt;
			font-style: italic;
		}
		
		#ch1-tables table tr td {
			text-align: center;
			border-bottom: 1px solid lightgray;
		}
		
		#ch1-tables table th.none, #ch1-tables table td.none {
			border: none;
		}
	
	</style>
	
	<div id="ch1-tables">
		<table>
			
			<tr>
				<th style="width: 20%;">Tango with Django</th>
				<th style="width: 20%;">Django Tutorial</th>
			</tr>
			
			<tr>
				<td>Chapter 3</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial01/">Part 1 - Models</a></td>
			</tr>
			
			<tr>
				<td>Chapter 5</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial02/">Part 2 - The Admin Interface</a></td>
			</tr>
			
			<tr>
				<td>Chapter 6</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial03/">Part 3 - URLs and Views</a></td>
			</tr>
			
			<tr>
				<td>Chapter 7</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial04/">Part 4 - Templates</a></td>
			</tr>
			
			<tr>
				<td>Chapter 18</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial05/">Part 5 - Testing</a></td>
			</tr>
			
			<tr>
				<td>Chapter 11</td>
				<td><a href="https://docs.djangoproject.com/en/1.7/intro/tutorial06/">Part 6 - CSS</a></td>
			</tr>
	
		</table>
	</div>





