.. _templates-label:

Шаблони та статичне медіа
=========================
В цьому розділі ми будемо розширювати знання Django знайомлячись з рушієм шаблонів, а також, як поводитися з *статичним медіа* на ваших веб-сторінках. 

.. _model-setup-templates-label:

Використання шаблонів
---------------------
До цього часу ви поєднували лише кілька речей для створення веб-сторінок на Django. Пара видів, котрі, в свою чергу, з'єднані з парою URL відображень. Тепер ми заглибимось і з'ясуємо як створювати суміші із шаблонів.

Добре спроектовані веб-сайти мають у своїй структурі або макетах багато повторів. Якщо ви бачите загальний заголовок або нижній колонтитул на сторінках веб-сайту  то `повтори макетів сторінок <http://www.techrepublic.com/blog/web-designer/effective-design-principles-for-web-designers-repetition/>`_ допомагають користувачам з навігацією, підтримують організацію веб-сайту та зміцнюють почуття безперервності. Django надає `шаблони  <https://docs.djangoproject.com/en/1.7/ref/templates/>`_ щоб зробити легшим для розробників досягнення цілей розробки,  а також відділити логіку додатку від  задач презентації. В цій главі ви створите базовий шаблон, що буде використовивутися при створенні HTML сторінок. Цей шаблон потім буде відправлено через вид Django. У розділі :ref:`model-using-label` ми використаємо цей крок у поєднанні з моделями для надсилання динамічно сгенерованих даних.

Конфігурування каталогу шаблонів
................................
Щоб користуватися шаблонами потрібно налаштувати каталог де ці шаблони будуть зберігатися. 

У теці проекту Django (наприклад ``<workspace>/tango_with_django_project/``), створіть новий каталог на ім'я  ``templates``. В ньому ж (в новоствореному каталозі) створіть каталог ``rango``. Таким чином, каталог ``<workspace>/tango_with_django_project/templates/rango/`` буде місцем зберігання шаблонів додатку ``rango``. 

Щоб налаштувати проект Django де знаходяться шаблони відкрийте файл проекту ``settings.py``. Додайте кортеж ``TEMPLATE_DIRS`` до ``settings.py`` і вкажіть шлях до новоствореного каталогу ``templates``, так, як показано нижче:

.. code-block:: python
	
	
	TEMPLATE_DIRS = ('<workspace>/tango_with_django_project/',)

Зауваже, що *потрібен абсолютний шлях* до каталогу ``templates``. Якщо ви працюєте в команді, або на різних комп'ютерах це може стати проблемою в майбутнєму. Ви будете мати різні імена, що означає різні шляхи до вашого каталогу ``<workspace>``. *Жорстко закодовані* шляхи, що наведені вище, не одне й те саме на різних комп'ютерах. Звичайно, ви можете виправляти каталог шаблонів для кожної окремої установки, але це був би досить огидний спосіб вирішення проблеми. Отже, що ми можемо зробити?

.. warning::
	Дорога до пекла встелена жорстко закодованими шляхами. 
 	`Жорстко закодовані <http://en.wikipedia.org/wiki/Hard_coding>`_ шляхи вважаються `програмним антипатерном <http://sourcemaking.com/antipatterns>`_ та роблять ваш проект менш `переносним <http://en.wikipedia.org/wiki/Software_portability>`_.

Динамічні шляхи
...............
Вирішення проблеми жорсткого кодування шляхів полягає у використанні вбудованих функцій Python для автоматизації роботи зі шляхом до каталогу ``templates``. У такий спосіб абсолютний шлях може бути отриманий незалежно від розташування проекту Django  файловій системі. Це, в свою чергу, означає що код вашого проекту робиться більш *переносним.* 

В Django 1.7 файл ``settings.py``  тепер має змінну ``BASE_DIR``. В ній зберігається шлях до каталогу в котрому міститься файл проекту ``settings.py``. Знаення отримано за допомогою спеціального атрибуту Python ``__file__`` котрий `встановлюється рівним абсолютному шляху до вашого модуля <http://stackoverflow.com/a/9271479>`_.  Якщо ``__file__`` абсолютний шлях до файла налаштувань, тоді виклик ``os.path.dirname()`` абсолютний шлях до каталогу. Повторний виклик ``os.path.dirname()`` видалить ще один шар, так щоб  ``BASE_DIR`` містила ``<workspace>/tango_with_django_project/``. Переглянте цей процес у дії, якщо цікаво, додавши такі рядки:

.. code-block:: python
	
	print __file__
	print os.path.dirname(__file__)
	print os.path.dirname(os.path.dirname(__file__))
	


Давайте скористуємось цим зараз. Створіть нову змінну в ``settings.py`` на ім'я ``TEMPLATE_PATH`` та збережіть в ній шлях до каталогу ``templates``. З використанням функції ``os.path.join()`` ваш код має виглядати як в наведеному нижче прикладі:

.. code-block:: python
	
	TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')

Ми скористалися ``os.path.join()`` для поєднання змінної ``BASE_DIR`` та  ``'templates'`` і отримання в результаті, наприклад ``<workspace>/tango_with_django_project/templates/``. Тепер ми можемо замінити жорстко закодований шлях в ``TEMPLATE_DIRS`` на ``TEMPLATE_PATH``:

.. code-block:: python
	
	TEMPLATE_DIRS = (
	    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
	    # Always use forward slashes, even on Windows.
	    # Don't forget to use absolute paths, not relative paths.
	    TEMPLATE_PATH,
	)

Ми можемо тримати змінну ``TEMPLATE_PATH`` з початку файлу ``settings.py`` для зручного доступу, якщо її треба буде змінити. Для цього ми і зробили додаткову змінну.

.. warning:: При поєднанні шляхів користуйтеся функцією ``os.path.join()``. Вона забезпечить використання правильних слешів, в залежності від операційної системи. На POSIX-сумісних операційних системах використовується прямий слеш(/), а на Windows зворотній(\). У випадку ручного додавання слешу ви можете отримати помилку при зміні операційної системи.




.. _adding-a-template-label:

Створення шаблону
.................
Створіть файл ``index.html`` і розмістіть його в каталозі ``templates/rango/``. Додайте в нього такий код HTML:

.. code-block:: html
	
	<!DOCTYPE html>
	<html>
	
	    <head>
	        <title>Rango</title>
	    </head>
	    
	    <body>
	        <h1>Rango says...</h1>
	        hello world! <strong>{{ boldmessage }}</strong><br />
	        <a href="/rango/about/">About</a><br />
	    </body>
	
	</html>

З коду зрозуміло, що це проста HTML сторінка буде виводити привітання *hello world*. Зверніть увагу на не-HTML код у вигляді ``{{ boldmessage }}``. Це *змінна шаблону Django* і ми можемо встановити її значення для відображення. Що ми зараз і зробимо.

Щоб скористатися цим шаблоном потрібно переконфігурувати вид ``index()``, котрий ми створили раніше. Замінемо передачу простого повідомлення на передачу нашого шаблону.

В ``rango/views.py`` додайте імпорт:

.. code-block:: python
	
	from django.shortcuts import render

Тепер змініть функцію ``index()`` як показано. Прочитайте коментарі, щод дізнатися що робить кожен рядок коду.

.. code-block:: python
	
	def index(request):
	     
	    # Створимо словник для передачі контексту в рушій шаблону.
	    # Зауважте- ключ boldmessage такий самий як {{ boldmessage }} в шаблоні!
	    context_dict = {'boldmessage': "I am bold font from the context"}
	    
	    # Повертаємо опрацьовану відповідь для відправки клієнту.
	    # Ми скористалися допоміжною функцією для полегшення життя.
	    # Увага, другий параметр- це ім'я шаблону котрий ми хочемо використати.
		
	    return render(request, 'rango/index.html', context_dict)


Сочатку ми створили словник пар ключ-значення для використання з шаблоном, потім викликали допоміжну функцію ``render()``. Ця фунція приймає запит користувача ``request``, ім'я файлу шаблону та словник контексту. Функція ``render()`` приймає ці дані та об'єднує з шаблоном для отримання HTML сторінки. Потім ця сторінка повертається до веб-переглядача користувача.

Коли файл шаблону завантажується у систему шаблонів Django створюється *контекст шаблону*. Контекст шаблону це , по суті, словник Python що відображає змінні шаблону на змінні Python. У створений раніше шаблон ми додали змінну ``boldmessage``. А в ``index(request)`` рядок ``I am bold font from the context`` відображається на змінну ``boldmessage``. Таким чином, рядок ``I am bold font from the context`` замінює у шаблоні будь-який зразок  ``{{ boldmessage }}``.

Тепер, коли ви оновили вид для застосування шаблону, запустіть сервер розробки Django і відвідайте http://127.0.0.1:8000/rango/. Ви побачите ваш шаблон у всій красі, так, як показано на малюнку :num:`fig-rango-hello-world-template`. 

Якщо ні, прочитайте повідомлення про помилку щоб з'ясувати в чому проблема, а потім двічі перевірте всі зміни що були зроблені вами. Впевніться що було зроблено все потрібне. Найбільш розповсюджена помилка з неправильним шляхом до шаблонів в ``settings.py``. Іноді варто додати команду ``print`` до ``settings.py`` і перевірити значення ``BASE_DIR`` та ``TEMPLATE_PATH``.

Цей приклад демонструє як використовувати шаблони у видах. Однак ми розлянули лише невелику частину функціональності Django стосовно шаблонів. Ми будемо користуватися шаблонами у більш складний спосіб при подальшому вивченні цього посібника. Тим часом ви можете дізнатися більша про `шаблони з офіційної документації <https://docs.djangoproject.com/en/1.7/ref/templates/>`_.

.. _fig-rango-hello-world-template:

.. figure:: ../images/rango-hello-world-template.png
	:figclass: align-center

	Копія екрана з Google Chrome що відмальовує шаблон з посібника.

Роботи зі статичним медіа
-------------------------
Якщо відверто, веб-сайт *Rango* доволі плаский, не використано ні стилів ні зображень.  `Cascading Style Sheets (CSS) <http://en.wikipedia.org/wiki/Cascading_Style_Sheets>`_, `JavaScript <https://en.wikipedia.org/wiki/JavaScript>`_ і малюнки це *статичне медіа*, файли котрі ми можемо включити до нашого веб-сайту, додати стиль та запровадити динамічну поведінку. З такими файлами працюють трохи у інший спосіб ніж зі звичайними веб-сторінками. Вони не генеруються льоту як наші HTML сторінки. У цьому розділі показано, як налаштувати ваш проект Django для обслуговування статичних медіа для клієнта. Ми також модифікували шаблон, щоб включити деякі приклади статичних медіа.

Налаштування каталогу статичних медіа
.....................................
Щоб використовувати статичне медіа спочатку потрібно створити каталог зберігання медіафайлів. В каталозі проекту (наприклад ``<workspace>/tango_with_django_project/``) створіть нову теку і назвіть її ``static`` та в ній створіть ще каталог на ім'я ``images``.

Тепер в теці ``static/images`` розмістіть зображення. Як показано на малюнку :num:`fig-rango-picture`, ми обрали зображення хамелеона `Rango <http://www.imdb.com/title/tt1192628/>`_ - підхожий талісман.

.. _fig-rango-picture:

.. figure:: ../images/rango-picture.png
	:figclass: align-center

	Хамелеон Rango з теки статичного медіа.

Ми маємо теку ``static``, але про це потрібно розповісти Django так само як ми зробили з текою ``templates`` раніш. До файлу ``settings.py`` потрібно додати дві змінні:  ``STATIC_URL`` та кортеж ``STATICFILES_DIRS``, так як показано нижче:

.. code-block:: python
	
	STATIC_PATH = os.path.join(BASE_DIR,'static')

	STATIC_URL = '/static/' # You may find this is already defined as such.
	
	STATICFILES_DIRS = (
	    STATIC_PATH,
	)

Ви ввели трохи коду, але що він робить? Перша змінна ``STATIC_URL`` втановлює базовий URL відносно котрого ваш додаток Django буде шукати файли статичного медіа коли запущено сервер. Наприклад, коли запущено сервер розробки Django зі ``STATIC_URL`` втановленим рівним ``/static/``, як в наведеному вище коді, статичне медіа буде доступне за адресою ``http://127.0.0.1:8000/static/``.  `Офіційна документація по роботі зі статичним медіа <https://docs.djangoproject.com/en/1.7/ref/settings/#std:setting-STATIC_URL>`_ попереджає, що життєво важливо щоб були саме такі слеші.

В той час як ``STATIC_URL`` визначає URL для доступу до медіа через веб-сервер, ``STATICFILES_DIRS`` дає можливість встановити розміщення новоствореної теки ``static`` на локальному диску. Як і кортеж ``TEMPLATE_DIRS``, ``STATICFILES_DIRS`` потребує абсолютного шляху до теки ``static``. Тут ми знову скористаємося ``BASE_DIR`` щоб створити ``STATIC_PATH``.

Оновивши обидва налаштування, знову запустіть сервер розробки Django. Якщо хочете подивитися зображення Rango, відвідайте URL ``http://127.0.0.1:8000/static/images/rango.jpg``. Якщо не вийшло, перевірте налаштуванняв файлі ``settings.py`` та перезавантажте сервер розробки. Якщо вийшло, спробуйте додати ще файли до теки ``static`` і спробуйте  зробити запит до них через веб-переглядач.

.. caution:: При використанні сервера розробки Django наведений спосіб роботи з медіа файлами чудово працює, але вкрай непридатний для робочого - або *живого* - оточення. `Офіційна документація Django <https://docs.djangoproject.com/en/1.7/howto/static-files/deployment/>`_ надає подальшу інформацію про розгортання статичних файлів в робочому оточенні.

Статичні медіа-файли і шаблони
------------------------------
Тепер, коли ви маєте налаштований для роботи зі статичним медіа проект Django є можливість використовувати їх у шаблонах.

Щоб скористатися статичним медіа, наприклад, відкрийте файл ``index.html``, що в теці ``<workspace>/templates/rango/``. Змініть код HTML як показано далі. Два рядки, що ми додали, виділено коментарями HTML.

.. code-block:: html

	<!DOCTYPE html>
	
	{% load staticfiles %} <!-- New line -->
	
	<html>
	
	    <head>
	        <title>Rango</title>
	    </head>
	    
	    <body>
	        <h1>Rango says...</h1>
	        hello world! <strong>{{ boldmessage }}</strong><br />
	        <a href="/rango/about/">About</a><br />
	        <img src="{% static "images/rango.jpg" %}" alt="Picture of Rango" /> <!-- New line -->
	    </body>
	
	</html>

Поперше, потрібно, за допомогою тегу ``{% load static %}``, повідомити систему шаблонів Django що ми збираємося використовувати статичне медіа. Це дає можливість викликати тег шаблонів ``static``, як зроблено в ``{% static "rango.jpg" %}``. Як ви можете побачити, теги шаблонів Django позначають фігурними дужками ``{ }``. В цьому прикладі, тег ``static`` поєднує ``STATIC_URL`` з ``"rango.jpg"``, так, що в результаті буде отримано наведний нижче код HTML.

.. code-block:: html

	<img src="/static/images/rango.jpg" alt="Picture of Rango" /> <!-- New line -->

Якщо, чомусь, зображення не може бути завантажено, завжди добре вказувати альтернативний текст. Саме для цього й призначено атрибут ``alt`` - вказаний в ньому текст використовується якщо є проблеми завантаження зображення.

З такими незначними змінами, знову запустіть сервер розробки та відвідайте  ``http://127.0.0.1:8000/rango``. Сподіваюсь, що ви побачите щось як на наведеному малюнку :num:`fig-rango-site-with-pic`.

.. _fig-rango-site-with-pic:

.. figure:: ../images/rango-site-with-pic.png
	:figclass: align-center

	Наш перший шаблон Rango з зображенням хамелеона Rango.

Використовуйте функцію ``{% static %}`` для посилань на статичне медіа в шаблонах. Далі наведено приклад для JavaScript, CSS та зображень в шаблонах - всі з коректною HTML розміткою.

.. code-block:: html
	
	<!DOCTYPE html>
	
	{% load static %}
	
	<html>
	
	    <head>
	        <title>Rango</title>
	        <link rel="stylesheet" href="{% static "css/base.css" %}" /> <!-- CSS -->
	        <script src="{% static "js/jquery.js" %}"></script> <!-- JavaScript -->
	    </head>
	    
	    <body>
	        <h1>Including Static Media</h1>
	        <img src="{% static "images/rango.jpg" %}" alt="Picture of Rango" /> <!-- Images -->
	    </body>
	
	</html>

Зрозуміло, що статичні файли повинні бути в каталозі ``static``. Якщо файл відсутній, або є помилка у посиланні, консоль сервера розробки Django видає відповідне повідомлення про помилку. Спробуйте зробити посилання на відсутній файл і подивіться що трапиться.

Для отримання подальшої інформації з використання статичного медіа зверніться до  `документації Django по роботі зі статичними медіа-файлами в шаблонах <https://docs.djangoproject.com/en/1.7/howto/static-files/#staticfiles-in-templates>`_.

.. caution:: Потурбуйтеся про те щоб гарантувати присутність в шаблоні `декларації типу документа <http://en.wikipedia.org/wiki/Document_Type_Declaration>`_ (наприклад ``<!DOCTYPE html>``) у *першому рядку* веб-сторінки. Саме цьому ми розмістили команду шаблону Django ``{% load static %}`` на один рядок нижче декларації типу документу, а не з самого верху. Це вимога різновидів HTML/XHTML щоб декларація типу документа була у першому рядку. Команди Django що розташовані раніше будуть видалені з остаточно опрацьованого виводу, але є імовірність залишку пустих рядків, в результаті чого  вихідний документ не буде `відповідати <http://www.w3schools.com/web/web_validate.ASP>`_ на `сервісі перевірки W3C <http://validator.w3.org/>`_.

.. todo:: (leifos) Зверніть увагу, що це не найкраща практика, коли ви йдете до розгортання, і що вони повинні побачити:: https://docs.djangoproject.com/en/1.7/howto/static-files/deployment/ і що наступне рішення працює, коли ``DEBUG=True``

.. todo:: (leifos) змінна DEBUG в settings.py, дозволяє вам контролювати повідомлення коли трапляються помилки і використовується для зневадження. Небезпечно залишати DEBUG рівним True при розгортанні програми. Якщо DEBUG встановлюється рівним False, потрібно визначити змінни ALLOWED_HOSTS в settings.py. У випадку локального комп'ютера вона повинна бути рівною ``127.0.0.1``. Також потребує оновлення файл urls.py:


.. code-block:: python


	from django.conf import settings # New Import
	from django.conf.urls.static import static # New Import


	if not settings.DEBUG:
		urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


#TODO(leifos): Можливо ми опишемо все це в розділі про розгортання... ймовірно це більш доцільно


Сервер статичного медіа
-----------------------
Тепер, коли ми вміємо відправляти статичні файли, давайте подивимось як завантажувати медіа. Багато вебсайтів дають користувачам можливість робити це - наприклад, щоб завантажити зображення профілю. У цьому розділі показано як додати простий медіа сервер розробки до вашого проекту Django. Медіа сервер розробки може використовуватися у поєднанні з формами завантаження, яких ми торкнемося у розділі :ref:`login-label`.

Отож, як ми будемо налаштовувати медіа сервер розробки? Перший крок це - створити нову теку на ім'я ``media`` в корені проекту Django (наприклад ``<workspace>/tango_with_django_project/``). Нова тека ``media`` повинна бути поруч з теками ``templates`` та ``static``. Після створення теки потрібно змінити  файл ``urls.py`` проекту Django, що знаходиться у теці конфігурації проекту (наприклад ``<workspace>/tango_with_django_project/tango_with_django_project/``). Додайте такий код до файлу ``urls.py``:

.. code-block:: python
	
	# На початку файлу urls.py, додайте рядок:
	from django.conf import settings
	
	# ПІСЛЯ визначення патернів  url (urlpattern), додайте:
	if settings.DEBUG:
	    urlpatterns += patterns(
	        'django.views.static',
	        (r'^media/(?P<path>.*)',
	        'serve',
	        {'document_root': settings.MEDIA_ROOT}), )

Модуль ``settings`` з ``django.conf`` надає доступ до змінних що визначені у файлі проекту ``settings.py``. Твердження умови перевіряє чи запущено проект Django у спосіб `ЗНЕВАДЖЕННЯ <https://docs.djangoproject.com/en/1.7/ref/settings/#debug>`_ . Якщо ``DEBUG`` проекту встановлено в ``True``, тоді до кортежу ``urlpatterns`` додаються додаткові URL патерни. Шаблони налаштовані так, що кожен запит що починається з ``media/`` буде передано до виду ``django.views.static``. Цей вид підтримує обробку завантажених медіа-файлів.

Після файлу``urls.py`` також потрібно внести зміни до файлу налаштувань проекту ``settings.py``. Потрібно встановити значення двох змінних. Додайте ``MEDIA_URL`` і ``MEDIA_ROOT`` та встановіть їх значення як показано далі.

.. code-block:: python
	
	MEDIA_URL = '/media/'
	MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Absolute path to the media directory

Перша змінна ``MEDIA_URL`` встановлює базовий URL від котрого всі медіа-файли будоть досяжнні на вашому сервері розробки. Встановивши значення ``MEDIA_URL``, наприклад, у ``/media/`` призведе до того, що файли користувача будуть доступні за URL адресою ``http://127.0.0.1:8000/media/``. ``MEDIA_ROOT`` використовується щоб повідомити Django де на вашому локальному диску повинні зберігатися завантажені файли. В наведеному прикладі ми встановлюєму цю змінну рівеою результату об'єднання змінної ``PROJECT_PATH``, котру ми визначили у розділі :ref:`model-setup-templates-label`, та  ``/media/``. Це дає нам абсолютний шлях ``<workspace>/tango_with_django_project/media/``.

.. caution:: Як згадувалося,  медіа сервер розробки, що постачається з Django,  дуже корисний для зневадження. Однак, він **ніколи** не повинен використовуватися в робочому оточенні. Офіційна `документація Django про статичні файли <https://docs.djangoproject.com/en/1.7/ref/contrib/staticfiles/#static-file-development-view>`_ попереджує що такий підхід *"вкрай неефективний та небезпечний"*. Якщо ви збираєтесь розгортати ваш проект Django перечитайте документацію та оберіть більш безпечний засіб.

Для перевірки налаштувань покладіть файл зображення до новостворенної теки ``media``. Запустіть сервер розробки Django та виканайте запит зображення в браузері. Наприклад, якщо ви додали файл ``rango.jpg`` до ``media``, URL буде виглядати так: ``http://127.0.0.1:8000/media/rango.jpg``. В браузері повинен відобразитися малюнок. Якщо ні, поверніться та перевірте налаштування.

#TODO(leifos): check that this still works (certainly you can access the images.. need to check the uploading)

Підсумок
--------
Тепер ви повинні вміти налаштовувати та створювати шаблони, використовувати їх у видах, налаштовувати та використовувати Django для відсилання статичних медіа файлів, додавати зображення до шаблонів *та* налаштовувати сервер статичного медіа Django для завантаження файлів. Ми справді охопили досить багато!

Створення шаблонів та поєднання їх з видами Django це ключове поняття. Це займає кілька кроків, але, після кількох спроб, стає звичним.

#. Спочатку створіть шаблон та збережіть його в теці ``templates``, котру ви визначили в файлі ``settings.py`` проекту. Ви можете використовувати змінні шаблонів Django (наприклад ``{{ variable_name }}``). У відповідному виді ви зможете замінити їх на потрібне значення.
#. Знайдіть або створіть новий вид в файлі додатку ``views.py``.
#. Додайте потрібну логіку (якщо потрібно) до виду. Наприклад, це може бути отримання інформації з бази даних.
#. У виді створіть об'єкт словника котрий можна передати до рушія шаблонів як частину *контексту* поточного шаблона.
#. Використовуйте допоміжну функцію ``render()`` для генерації сформованого відгуку. Перевірте параметри функції, спочатку запит, потім шаблон і словник контексту!
#. Якщо ви досі цього не зробили, створіть відображення виду на URL, відредагувавши файл проекту ``urls.py`` - і також, якщо потрібно, файл ``urls.py`` вашого додатку.

Кроки необхідні для показу файлів статичного медіа на ваших сторінках - це ще один важливий процес який потрібно добре знати. Етапи необхідні для цього - переглянте нижче.

#. Візміть потрібний файл та розмістіть його в теці ``static`` вашого проекту. Цей каталог ви визначили в кортежі ``STATICFILES_DIRS`` файлу ``settings.py``.
#. У шаблоні додайте посилання на статичне медіа. Наприклад, зображення може бути вставлене в HTML сторінку з використанням тегу ``<img />``. 
#. Не забувайте використовувати ``{% load staticfiles %}`` та ``{% static "filename" %}`` в шаблонах для доступу до статичних файлів.

В наступному розділі розгядається база даних. Ми побачимо як користуватися чудовими інструментами баз даних Django щоб зробити життя легшим та вільним від SQL!

Вправи
------
Виконайте наступні вправи щоб зміцнити те, що ви дізналися з цієї глави.

* Зробіть щоб сторінка "about" використовувала шаблон на ім'я ``about.html``.
* До шаблону ``about.html`` додайте зображення зі статичних медіа вашого проекту.
