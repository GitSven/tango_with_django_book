.. _requirements-label:

Підготовка до танго
===================
Почнемо налаштуванняLet's get set up! Для танго з Django потрібно переконатися , що все необхідне встановлено на вашому комп'ютері і що у вас є чітке розуміння середовища розробки. Цей розділ про те що ви повинні мати та знати.

Для вивчення посібника необхідно мати:

* Python версії 2.7.5+
* Django версії 1.7

Через те що Django є веб-додатком, що написаний на мові програмування Python- від вас вимагається знання Python. Якщо ви не користувалися Python раніше, або вам потрібно освіжити свої навички- тоді рекомендуємо скористатися одним або кількома з цих керівництв:

* **A quick tutorial** - Learn Python in 10 Minutes by Stavros, http://www.korokithakis.net/tutorials/python/.
* **Офіційний посібник з Python** - http://docs.python.org/2/tutorial/.
* **A brilliant book**: Think Python: How to Think like a Computer Scientist by Allen B. Downey, available online at http://www.greenteapress.com/thinkpython/.
* **An amazing online course**: Learn to Program, by Jennifer Campbell and Paul Gries at https://www.coursera.org/course/programming1.

Користуваня терміналом
----------------------
Дуже важливо вміти користуватися інтерпритатором командного рядка(*Command Line Interpreter (CLI)*) від вашої операційної системи. Зазвичай, на протязі всього курсу ви будете користуватися CLI. Якщо ви вже знаєте комендний радок, то можете одразу одразу читати частину :ref:`Установка програмного забезпечення <installing-software>`.

Всі UNIX-подібні операційні системи використовують термінал подібний  `terminal <http://www.ee.surrey.ac.uk/Teaching/Unix/unixintro.html>`_. Багато нащадків, похідних та клонів UNIX-систем, включно з `Apple's OS X <http://en.wikipedia.org/wiki/OS_X>`_ та `багатьма іншими Linux дистрибутивами <http://en.wikipedia.org/wiki/List_of_Linux_distributions>`_ доступні сьогодні. Всі ці операційні системи містять базовий набір команд котрі допомагають переглядати файлову систему і запускати програми без потреби в графічному інтерфейсі. Ця частина книги допоможе ознайомитися з такими командами.

.. note:: Цей посібник орієнтований на каристувачів UNIX-подібних або UNIX-похідних операційних систем. Незважаючи на те що Python і Django можуть запускатися в Windows-середовищі, багато команд котрими ми користуємось в цій книзі призначені для UNIX-терміналів. Однак, в Windows ці команди можуть бути повторені за допомогою графічного інтерфейсу користувача, або `з використанням відповідних команд в командному рядку  Windows <http://www.ai.uga.edu/mc/winforunix.html>`_, ще можна скористатия `Windows PowerShell <http://technet.microsoft.com/en-us/library/bb978526.aspx>`_ котра надає CLI, що подібний до UNIX терміналу.

Після запуску терміналу ви побачите, зазвичай, щось на зразок:

.. code-block:: guess
	
	sibu:~ leif$

Це називається *prompt* (підказка), і вона виводиться коли система очікує на введення вами команди. Вигляд підказки може бути різним в залежності від системи котрою ви користуєтесь, але, взагалі, всі вони досить схожі. В наведеному прикладі у підказці показана така інформація:

* ваше ім'я та ім'я комп'ютера (користувач ``leif``, на компьютері ``sibu``);
* ваша *поточна робоча тека* (``~`` тільда); та
* права вашого облікового запису (``$`` знак долара).

Знак долара звичайно показує, що користувач має права стандартного облікового запису. І навпаки, символ геш (ще називають решітка, шарп, дієз...) (``#``) може бути використаний для користувача з `правами адміністратора <http://en.wikipedia.org/wiki/Superuser>`_. Незалежно від символу, він використовуєтся для означення того, що комп'ютер чекає вашого вводу. 

Запустіть термінал та подивіться як виглядає підказка у вас.

Під час використання терміналу важливо знати своє місцезнаходження у файловій системі. Для визначення свого положення використовується команда ``pwd``. Вона відобразить вашу поточну теку. Наприклад, перегляньте зразок взаємодії з терміналом:

.. code-block:: guess
	
	Last login: Mon Sep 23 11:35:44 on ttys003
	sibu:~ leif$ pwd
	/Users/leif
	sibu:~ leif$

В результаті можна побачити, що в цьому прикладі поточна тека: ``/Users/leif``.

Зверніть увагу, підказка показує що поточна тека ~. Це тому, що тільдою (``~``) означається ваш *домашній каталог*. Базова тека в будь-якій UNIX-подібній файловій системі називається *кореневий каталог*. Шлях до кореневого каталогу позначається однією косою рисою (``/``).

Перейти у свій домашній каталог завжди можна за допомогою команди зміни каталогу- (``cd``), для чого введіть таку команду:

.. code-block:: guess
	
	$ cd ~

Давайте створимо теку на ім'я ``code``. Щоб зробити це використайте команду створення каталогу (``mkdir``),як показано нижче.

.. code-block:: guess
	
	$ mkdir code
	
Щоб перейти в новостворений каталог ``code``, ввeдіть ``cd code``. Якщо зараз перевірити свій робочий каталог, то ви повинні побачити, що тепер це ``~/code/``. Також це може бути відображено у вашій підказці. Зверніть увагу, що в наведеному нижче прикладі поточний робочий каталог виводиться після ``sibu``- імені комп'ютера.

.. note:: Кожного разу, коли ми посилаємось на ``<робочий простір>``- це буде означати ваш каталог ``code``.

.. code-block:: guess
	
	sibu:~ leif$ mkdir code
	sibu:~ leif$ cd code
	sibu:code leif$ 
	sibu:code leif$ pwd
	/Users/leif/code

Для переліку файлів в теці ви можете використовувати команду ``ls``. Щоб побачити приховані файли або каталоги, якщо вони є,запустіть команду ``ls -a``, де ``a`` позначає *all (всі).*  Якщо ви ``cd`` назад до вашого домашнього каталогу (``cd ~``) а потім виконаєте ``ls``, ви побачите, що ви маєте щось на ім'я ``code`` в вашому домашньому каталозі.

Щоб дізнатися більше що є в вашому каталозі виконайте ``ls -l``. Це надасть більш деталізований  *лістинг* ваших файлів з поміткою ``d`` з початку рядку, якщо це каталог.

.. code-block:: guess
	
	sibu:~ leif$ cd ~ 
	sibu:~ leif$ ls -l 
	
	drwxr-xr-x   36 leif  staff    1224 23 Sep 10:42 code

Лістинг також містить інформацію про `права доступу до каталогу <http://www.elated.com/articles/understanding-permissions/>`_, хто його створив (``leif``), групу (``staff``), розмір, дату/час останньої зміни, та, звісно, ім'я каталогу.

Також може бути корисною можливість редагувати файли в терміналі. Мається багато редакторів що ви можете використовувати, деякі, можливо, вже встановлено на вашому комп'ютері. Редактор `nano <http://www.nano-editor.org/>`_ ,наприклад, досить простий редактор, на відміну від `vi <http://en.wikipedia.org/wiki/Vi>`_ для вивчення якого потрібен певний час. Нижче наведено перелік корисних, частовживаних команд.

Основні команди
***************
Всі операційні системи на основі  UNIX поставляються з рядом вбудованих команд - більшість яких зосереджена виключно на управлінні файлами. Команди, які ви будете використовувати найбільш часто, перераховані нижче, кожна з коротким поясненням про те, що вона робить і як її використовувати.

- ``pwd``: *Prints Друкує* ваш поточний *working directory робочий каталог* на терміналі. Відображається повний шлях, де ви знаходитесь на даний час.
- ``ls``: Друк списку файлів в поточному робочому каталозі на термінал. За замовчуванням, ви не бачите розміри файлів - це може бути досягнуто шляхом додавання ``-lh`` до ``ls``, командою ``ls -lh``.
- ``cd``: Додайте до команди бажаний шлях і це дозволить вам *change(змінити)* вашу поточну *directory(теку)*. Наприклад, команда ``cd /home/leif/`` змінить поточний каталог на ``/home/leif/``. Також ви можете переміститися на каталог рівнем вище без потреби вказувати `абсолютний шлях <http://www.uvsc.edu/disted/decourses/dgm/2120/IN/steinja/lessons/06/06_04.html>`_ використавши дві крапки, тобто ``cd ..``.
- ``cp``: Копіювання файлів та/або каталогів. Ви повинні надати *джерело* і *ціль*. Наприклад, щоб зробити копію файла ``input.py`` у той самий каталог, потрібно виконати команду ``cp input.py input_backup.py``.
- ``mv``: Пересуває файли/каталоги. Як і для ``cp``, потрібно надати *джерело* і *ціль*. Ця команда використовується і для переіменування файлів. Наприклад, щоб змінити ``numbers.txt`` на ``letters.txt`` виконайте команду ``mv numbers.txt letters.txt``. Для переміщення файлп до іншого каталогу потрубно надати абсолютний або відносний шлях до цілі, наприклад: ``mv numbers.txt /home/david/numbers.txt``.
- ``mkdir``: Створює каталог у вашій поточній теці. Потрібно передати ім'я нового каталогу після команди ``mkdir``. Якщо, наприклад, поточний каталог ``/home/david/``, а ви запустили ``mkdir music``, то в результаті ви отримаєте каталог ``/home/david/music/``. Після потрібно ``cd`` щоб перейти до нового каталогу.
- ``rm``: Скорочення для *remove (усунути)*, ця команда усуває або видаляє файли. Потрібно передати ім'я (імена) файла(лів) котрі потрібно усунути. Після виконання команди ``rm`` , вас запитають чи бажаєте ви видалити обрані файли. Можна видаляти і каталоги `використавши перемикач рекурсії <http://www.computerhope.com/issues/ch000798.htm>`_. Будбте обережні з цією командою - дуже складно відновити видалені файли, або й неможливе!
- ``rmdir``: Альтернативна команда для видалення каталогів. Передавайте каталог котрий потрібно видалити. І знову ж, будьте обачні: запиту на підтвердження виконання не буде.
- ``sudo``: Програма котра дозволяє виконувати команди з правами іншого користувача. Зазвичай, ця програма використовується для запуску інших програм від імені ``root`` - `адміністратора <http://en.wikipedia.org/wiki/Superuser>`_  операційної системи UNIX.

.. note:: Це лише скорочений перелік команд. Переглянте документацію ubuntu `Using the Terminal <https://help.ubuntu.com/community/UsingTheTerminal>`_  для більш детального ознайомлення, або `Cheat Sheet 
 <http://fosswire.com/post/2007/08/unixlinux-command-cheat-sheet/>`_  -довідник від FOSSwire.

.. _installing-software:

Встановлення програмного забезпечення
-------------------------------------
Тепер, коли ви маєте певне уявлення як взаємодіяти з терміналом, можете починати встановлювати необхідне для посібника програмне забезпечення.

Встановлення Python
*******************
І як ви збираєтесь встановлювати Python 2.7.5 на ваш комп'ютер? Можливо ви вже маєте Python на комп'ютері - а якщо ви користуєтесь дистрибутивом Linux або OS X, то напевно  що Python вже встановлено. Частина функціоналу вашої операційної системи `здійснена на Python <http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified>`_, отже необхідно мати інтерпритатор!

Прикро, але майже всі сучасні операційні системи використовують більш ранню версію Python ніж потрібна для посібника. Є різні способи встановити Python і більшість з них складні. Ми покажемо найбільш широковживаний та дамо посилання для отримання додаткової інформації.

.. warning:: У цьому розділі описано як встановити Python 2.7.5 *поруч* з вже встановленним Python. Вважається поганою звичкою видаляти та замінювати Python, що був у комплекті з операційною системою. Це може привести до втрат певної частини функціональності вашої операційної системи!

Apple OS X
..........
Найпростіший шлях отримати Python 2.7.5 на вашому Mac- завантажити і запустити встановлювач з офіційного веб-сайту Python. Для цьго відвідайте сторінку за адресою http://www.python.org/getit/releases/2.7.5/.

.. warning:: Переконаайтесь, що завантажено ``.dmg`` файл відповідний до вашої OS X системи!

#. Завантаживши ``.dmg`` файл, двічі клацніть на ньому в Finder.
#. Файл змонтується як окремий диск в новому вікні Finder-а.
#. Для початку інсталяції двічі клацніть на файлі ``Python.mpkg``.
#. Просувайтеся через різні вікна до повного встановлення програмного засобу. Можливо треба буде ввести пароль для завершення інсталяції.
#. Після завершення закрийте встановлювач та демонтуйте диск Python. Вже можна видалити завантажений ``.dmg`` файл.

Тепер ви повинні мати потрібну для Django версію Python! Легко, так?

Дистрибутиви Linux
..................
На жаль, є багато способів завантаження,інсталяції та запусу оновленої версії Python для Linux. Погіршує стан те, що методології різняться від дистрибутиву до дистрибутиву. Наприклад, інструкції для інсталяції Python на `Fedora <http://fedoraproject.org/>`_ може різнитися від такої ж на `Ubuntu <http://www.ubuntu.com/>`_ .

Однак, не всі надії втрачено. Дивовижний інструмент (або *менеджер середовища Python*) що називається `pythonbrew <https://github.com/utahta/pythonbrew>`_ може допомогти нам розібратися в цьому питанні. Він надає легкий шлях для інсталяції та керування різними версіями Python, тобто ви можете залишити у спокої Python вашої операційної системи.
Взяті з інструкцій наданих на `сторінці pythonbrew на GitHub <https://github.com/utahta/pythonbrew>`_ та з `відповіді на питання в Stack Overflow  <http://stackoverflow.com/questions/5233536/python-2-7-on-ubuntu>`_, наступні кроки інсталюють Python 2.7.5 на ваш дистрибутив Linux.

#. Відкрийте нове вікно терміналу.
#. Виконайте команду ``curl -kL http://xrl.us/pythonbrewinstall | bash``. Вона завантажить інсталятьр та запустить його в терміналі. Таким чином інсталюється pythonbrew до каталогу ``~/.pythonbrew``. Пам'ятайте, що тільда (``~``) означає ваш домашній каталог!
#. Після вам потрібно відредагувати файл ``~/.bashrc``. В будь-якому текстовому редакторі (на кшталт ``gedit``, ``nano``, ``vi`` або ``emacs``), додайте такий рядок в кінці файлу ``~/.bashrc``: ``[[ -s $HOME/.pythonbrew/etc/bashrc ]] && source $HOME/.pythonbrew/etc/bashrc``
#. Після збереження файлу ``~/.bashrc``, закрийте та відкрийте термінал. Це потрібно для застосування змін.
#. Запустіть команду ``pythonbrew install 2.7.5`` щоб встановити Python 2.7.5.
#. Потім потрібно *включити* Python 2.7.5 як *активну* інсталяцію Python. Для цього виконайте команду ``pythonbrew switch 2.7.5``.
#. Тепер Python 2.7.5 повинен бути інстальований та готовий до запуску.

.. note:: Каталоги та файли назви котрих починаються з крапки можуть розгядатися як еквівалент *прихованих файлів* у Windows. `Файли з крапкою <http://en.wikipedia.org/wiki/Dot-file>`_ зазвичай приховані для засобів перегляду каталогів, та широковживані для файлів конфігурації. Можна користуватись командою ``ls`` для перегляду прихованих файлів. Для цього до команди додайте ``-a``, тобто ``ls -a``.

.. _requirements-install-python-windows:

Windows
.......
За замовчуванням, Microsoft Windows не має інстальованого Python. Це означає, що нема потреби хвилюватися з приводу збереження існуючої версії; установка з нуля повинна чудово спрацювати. Завантажте 64-bit або 32-bit версію Python з `офіційного сайту Python <http://www.python.org/download/>`_. Якщо маєте сумнів щодо завантаження, ви зможете визначитися який у вас комп'ютер 32-bit чи 64-bit подивившись інструкції `на сайті Microsoft <http://windows.microsoft.com/en-gb/windows7/32-bit-and-64-bit-windows-frequently-asked-questions>`_.

#. Коли установник завантаженно, відкрийте файл з того місця, до якого ви завантажили його.
#. Дотримуйтесь інструкцій на екрані, щоб встановити Python.
#. Закрийте програму установки після завершення, видаліть завантажений файл.

По завершенні роботи інсталятора ви повинні мати потрібну версію Python готову до роботи.  За замовчуванням, Python 2.7.5 встановлено в папку ``C:\Python27``. Ми рекомендуємо Вам залишити шлях, як є.

Після закінчення інсталяції запустіть командний рядок і введіть команду ``python``. Якщо ви бачите рядок Python, установка пройшла успішно. Однак, за певних обставин, інсталятор може встановити змінну середовища Windows ``PATH`` не належним чином. Через це команду ``python`` може бути не знайдено. Під Windows 7, ви можете виправити це, виконавши наступне:

#. Клацніть кнопку *Пуск*, клацніть правою кнопкою миші *Мій комп'ютер* і виберіть *Властивості*.
#. Клацніть вкладку *Додатково*.
#. Натисніть кнопку *Змінні оточення* button.
#. У списку *Системні змінні* знайдіть змінну *Path*, клацніть на ній, потім натисніть кнопку *Редагувати...*.
#. В кінці рядка додайте ``;C:\python27;C:\python27\scripts``. Не забудьте крапку з комою - і, звичайно, *не додавайте* пробіл.
#. Натисніть OK в кожному з вікон щоб зберігти зміни.
#. Закрийте всі командні рядки, відкрийте новій, та спробуйте знову запустити команду ``python``.

Таким чином ви повинні отримати повністью робочий Python. Windows XP, `має трохи інші інструкції <http://www.computerhope.com/issues/ch000549.htm>`_, та `теж саме для Windows 8 <http://stackoverflow.com/a/14224786>`_.

Налаштування ``PYTHONPATH``
***************************
З встановленим Python, треба впевнитися що все правильно зроблено. Для цього перевірте що ``PYTHONPATH``
`змінна оточення <http://en.wikipedia.org/wiki/Environment_variable>`_ відповідно налаштована. ``PYTHONPATH`` надає інтерпритатору Python розміщення додаткових Python `пакетів і модулів <http://stackoverflow.com/questions/7948494/whats-the-difference-between-a-python-module-and-a-python-package>`_ котрі розширюють функціональність базової інсталяції Python. Без правильної змінної ``PYTHONPATH`` ми не зможемо встановити і користуватися Django!

Спочатку перевіримо що змінна ``PYTHONPATH`` існує. В залежності від способу установки вона могла бути створена, а могла й ні. Для перевірки на UNIX виконайте в терміналі таке:

.. code-block:: guess
	
	$ echo $PYTHONPATH

На Windows в командному рядку:

.. code-block:: guess
	
	$ echo %PYTHONPATH%

Якщо все справно, ви повинні побачити результат схожий на показаний нижче. Звичайно, що на Windows машині ви побачите шлях Windows, який, найбільш вірогідно, починається з диску C.

.. code-block:: guess
	
	/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:

Це шлях до ``site-packages``- каталогу вашої установки Python, де зберігаються додаткові пакети і модулі Python. Якщо ви бачите шлях, можете продовжувати з наступної частини посібника. Якщо ні, то треба провести невеличке розслідування щоб знайти потрібний шлях. На Windows інсталяції, це тривіальна вправа: ``site-packages`` знаходться в папці ``lib`` вашої установки Python. Наприклад, якщо ви встановили Python до ``C:\Python27``, тоді ``site-packages`` буде в ``C:\Python27\Lib\site-packages\``.

UNIX-подібні операційні системи потребують більш кропіткого розслідування щоб знайти ``site-packages``. Щоб зробити це запустіть інтерпритатор Python. Наведена нижче сессія показує що вам потрібно зробити.

.. code-block:: python
	
	$ python
	
	Python 2.7.5 (v2.7.5:ab05e7dd2788, May 13 2013, 13:18:45) 
	[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
	Type "help", "copyright", "credits" or "license" for more information.
	
	>>> import site
	>>> print site.getsitepackages()[0]
	
	'/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages'
	
	>>> quit()

Виклик ``site.getsitepackages()`` повертає  перелік шляхів, що вказують на розташування сховищ додаткових пакетів та модулів Python. Зазвичай, першим у цьому переліку буде шлях до каталогу ``site-packages`` - в залежності від вашої інсталяції він може бути в іншій позиції переліку. Якщо ви отримуєте помилку при виконанні ``getsitepackages()`` -впевніться що ви користуєтесь потрібною версією Python. Версія 2.7.5 напевно має цю функцію. Попередні версії - ні.

Рядок котрий виведено як результат виконання ``print site.getsitepackages()[0]`` - шлях до вашого каталогу ``site-packages``. Тепер, отримавши шлях, потрібно додати його до конфігурації. На UNIX-подібних операційних системах відредактуйте ``.bashrc`` ще раз, додавши таке в кінець файлу:


.. code-block:: guess
	
	export PYTHONPATH=$PYTHONPATH:<PATH_TO_SITE-PACKAGES>

Замініть ``<PATH_TO_SITE-PACKAGES>`` шляхом до вашого каталогу ``site-packages``. Збережіть файл та перезапустіть термінал.

На Windows-системах, користуйтесь інструкціями з розділу :num:`requirements-install-python-windows`. Додайте  ``PYTHONPATH`` змінну зі значенням шляху то теки ``site-packages``, зазвичай це ``C:\Python27\Lib\site-packages\``.

Використання Setuptools та Pip
******************************
Інсталяція та налаштування оточення розробки - це дійсно важлива частина будь-якого проекту. Хоча й можливо встановлювати пакети Python, такі як Django, порізно, але це може призвести до чисельних проблеми і непорозуміннь. Наприклад, як поділитися своїми налаштуваннями з іншим розробником? Як створити такеж оточення на новій машині? Чи оновитися до останньої версії пакету?  Використання менеджера пакетів видаляє більшу частину клопоту у створенні та налаштуванні середовища. В цій книзі ми будемо користуватися *Pip*. Pip це зручна обгортка над менеджером пакетів Python *Setuptools*. Тому що Pip залежить від Setuptools, ми повинні забезпечити, щоб обидві програми були встановлені на вашому комп'ютері.
Для початку, потрібно завантажити Setuptools з `офіційного сайту пакетів Python <https://pypi.python.org/pypi/setuptools/1.1.6>`_. Ви можете завантажити пакет стиснутий ``.tar.gz``. Скористуйтесь вашим улюбленим архіватором та розпакуйте архів. Файли розпакуються до каталогу ``setuptools-1.1.6`` - де ``1.1.6`` це версія Setuptools. З терміналу перейдіть до цього каталогу і виконайте ``ez_setup.py`` як показано нижче.

.. code-block:: guess
	
	$ cd setuptools-1.1.6
	$ sudo python ez_setup.py

В наведеному вище прикладі ми скористалися ``sudo`` щоб зміни набули чинності в масштабах всієї системи. Друга команда повинна встановити Setuptools. Якщо інсталяція успішна, то повинно з'явитися повідомлення на зразок наведеного нижче.

.. code-block:: guess
	
	Finished processing dependencies for setuptools==1.1.6

Звичайно, замість ``1.1.6`` буде номер інстальованої версії Setuptools. Якщо ви побачили цей рядок, то можна переходити до встановлення Pip. Це дуже просто і може бути виконано однією простою командою. З терміналу введіть:

.. code-block:: guess
	
	$ sudo easy_install pip

Ця команда повинна завантажити та встановити Pip, зверніть увагу, ми знову скористалися ``sudo``. Ви повинні побачити рядок, показаний нижче, що є ознакою успішної інсталяції.

.. code-block:: guess
	
	Finished processing dependencies for pip

Тепер ви можете користуватися Pip  з терміналу. Щоб зробити це, лише надрукуйте ``pip``. Замість повідомлення про невідому команду ви повинні побачити довідку з переліком команд та опцій? які сприймає Pip. Якщо ви це бачите- можете просуватись далі!

.. note:: На Windows комп'ютерах зробіть теж саме. Зауважте, вам не потрібна команда ``sudo``.

Інсталяція Django
*****************
Тепер, після інсталяції Pip, можна легко встановити Django. Відкрийте командний рядок,  або термінал, та виконайте наступну команду:

.. code-block:: guess
	
	$ pip install -U django==1.7

Якщо ви користуєтесь UNIX-подібною системою і отримуєте повідомлення про відсутність дозволу, знову скористайтесь командою ``sudo``. Тобто, запустіть таку команду:

.. code-block:: guess
	
	$ sudo pip install -U django==1.7

Менеджер пакунків завантажить Django та встановить його у потрібне місце. По закінченню, Django повинен бути успішно інстальований. Зауважте, що, якщо не скористатися ``==1.7``, може бути встановлена інша версія Django.

Встановлення the Python Imaging Library
***************************************
На протязі курсу з побудови Rango, нам потрібно завантажувати та обробляти зображення. Це означає, що нам знадобиться підтримка від `Pillow (Python Imaging Library) <https://pillow.readthedocs.org/en/latest/>`_. Щоб встановити цей пакунок виконайте:

.. code-block:: guess
	
	$ pip install pillow

І знову, скористайтесь ``sudo``, якщо потрібно. 


Інсталяція інших пакетів Python
*******************************
Варто відзначити, що додаткові пакети Python можуть бути легко завантажені таким же чином. На `The Python Package Index <https://pypi.python.org/pypi>`_ перераховані всі пакети доступні через Pip.

Щоб отримати перелік встановлених пакетів виконайте таку команду:

.. code-block:: guess
	
	$ pip list

Спільне використання списку пакетів
***********************************
Ви також можете отримати список встановлених пакетів у форматі, який може використовуватися спільно з іншими розробниками. Щоб зробити це, виконайте наступну команду.

.. code-block:: guess
	
	$ pip freeze > requirements.txt

Якщо ви оглянете ``requirements.txt`` за допомогою команд ``more``, ``less`` or ``cat``, ви побачите туж саму інформацію, але в трохи іншому форматі. Файл ``requirements.txt`` можна використати для повторної установки за допомогою наведеної нижче команди. Це надзвичайно корисно для налаштування середовища на іншому комп'ютері.

::
	
	$ pip install -r requirements.txt

Інтегроване середовище розробки
-------------------------------
Хоча це і не абсолютно необхідно, але добре інтегроване середовище розробки для Python (IDE) може бути дуже корисним. Існує кілька, з котрих,  можливо, JetBrains' `*PyCharm* <http://www.jetbrains.com/pycharm/>`_ та *PyDev* (плагін до `Eclipse IDE <http://www.eclipse.org/downloads/>`_) найбільн популярні. На `Python Wiki <http://wiki.python.org/moin/IntegratedDevelopmentEnvironments>`_ можна подивитись актуальний перелік Python IDE.

Оберіть яке краще пасує, але зауважте, що деякі потребують придбання ліцензії для використання. В ідеалі, треба обирати IDE котре підтримує інтеграцію з Django. PyCharm та PyDev підтримують Django "з коробки" - лише треба налаштувати IDE на версію Python що ви використовуєте.



Віртуальні оточення
*******************
Майже все готово до роботи! Однак, перш ніж ми продовжимо, варто відзначити, що, хоча, ця інсталяція достатня для початку, маємо кілька недоліків. Що робити якщо ви маєте додаток, що потребує іншої версії Python для запуску? Або ви хочете використовувати нову версію Django, і, в одночас, вам необхідно підтримувати старий проект Django 1.7?

Рішення полягає в використанні `віртуального оточення <http://simononsoftware.com/virtualenv-tutorial/>`_. Віртуальні оточення дають можливість співіснувати кільком інсталяціям Python та його пакунків. В даний час це загальноприйнятий підхід до налаштування установки Python.  

Вони досить прості в налаштуванні, якщо ви маєте pip, та знаєте потрібні команди. Лише треба встановити кілька додаткових пакунків.

::
	
	$ pip install virtualenv
	$ pip install virtualenvwrapper
	

Перший пакунок забезпечує інфраструктуру для створення віртуального оточення. Переглянте `немагічне введення до Pip та Virtualenv для початківців Python <http://dabapps.com/blog/introduction-to-pip-and-virtualenv-python/>`_ від Jamie Matthews для детального вивчення як користуватися virtualenv. Однак, використання лише *virtualenv* доволі складне. Другий пакунок встановлює обгортку для virtualenv і робить життя набагато легчим. 

Якщо ви користуєтесь операційною системою на базі linux/unix, то для використання цієї обгортки потрібно викликати таку команду:
::

	$ source virtualenvwrapper.sh

Булоб добре додати цей рядок до вашого bash/profile скрипту щоб не виконувати цю команду кожного разу при використанні віртуального оточення.

Але, якщо ви працюєте у windows, потрібно встановити пакунок `virtualenvwrapper-win <https://pypi.python.org/pypi/virtualenvwrapper-win>`_ :


::

	$ pip install virtualenvwrapper-win
	

	
Тепер все готово для створення віртуального оточення:

::

	$ mkvirtualenv rango

Ви можете отримати перелік віртуальних оточень командою ``lsvirtualenv``, та активувати потрібне за допомогою команди:

::

	$ workon rango
	(rango)$
	
Підказка командного рядка змінаться і покаже ім'я поточного віртуального оточення, тобто rango. Тепер, у віртуальному оточенні, ви можете встановлювати будь-які пакунки, не зашкодивши стандартному або іншому оточенню. Спробуйте ``pip list`` щоб переконатися що ви не маєте Django або Pillow встановленими в вашому оточенні. Тепер скористайтеся pip для встановлення пакунків.

Далі, коли ми будемо розгортати наш додаток, ми виконаємо схожий процес (дивіться розділ :ref:`Розгортання вашого додатку <virtual-environment>`) та налаштуємо віртуальне оточення на PythonAnywhere.

Репозиторій коду
****************
Ми повинні також зауважити, що при розробці коду вам слід зберігати свій код за допомогою системи контролю версій на зразок `SVN <http://subversion.tigris.org/>`_ або `GIT <http://git-scm.com/>`_. Зараз ми не будемо розгядати це питання, однак надамо посилання :ref:`crash course on GIT <git-crash-course>`. Ми настійно радимо налаштувати репозиторій GIT для ваших проектів. Це може врятувати вас від катастрофи.




Вправи
------
Щоб призвичаїтися до оточення спробуйте виконати такі вправи:

* Встановіть Python 2.7.5+ та Pip.
* Пограйтесь з командним рядком та створіть каталог на ім'я ``code``, який ми використаємо для створення нашого проекту.
* Встановіть пакунки Django та Pillow.
* Налаштуйте віртуальне оточення
* Налаштуйте обліковий запис на GitHub
* Завантажте та встановіть інтегроване середовище розробки (на зразок PyCharm)
* Ми виклали код з книжки на GitHub `Tango With Django Book <https://github.com/leifos/tango_with_django_book>`_  та додаток, що ви розробляєте, можна подивитись за адресою  `Rango Application <https://github.com/leifos/tango_with_django>`_ .
	* Якщо ви помітили будь-які помилки або проблеми з книгою, ви можете зробити запит на зміну! 
	* Якщо у вас є які-небудь проблеми з вправами, ви можете перевірити репозиторій і подивитися, як ми завершили їх.
